// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/gogent.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GogentService_Login_FullMethodName                = "/gogent.GogentService/Login"
	GogentService_Register_FullMethodName             = "/gogent.GogentService/Register"
	GogentService_CreateTemporaryUser_FullMethodName  = "/gogent.GogentService/CreateTemporaryUser"
	GogentService_SaveTemporaryAccount_FullMethodName = "/gogent.GogentService/SaveTemporaryAccount"
	GogentService_VerifyEmail_FullMethodName          = "/gogent.GogentService/VerifyEmail"
	GogentService_GetCurrentUser_FullMethodName       = "/gogent.GogentService/GetCurrentUser"
	GogentService_Execute_FullMethodName              = "/gogent.GogentService/Execute"
	GogentService_GetExecutionStatus_FullMethodName   = "/gogent.GogentService/GetExecutionStatus"
	GogentService_GetExecutionResult_FullMethodName   = "/gogent.GogentService/GetExecutionResult"
	GogentService_ListExecutionRuns_FullMethodName    = "/gogent.GogentService/ListExecutionRuns"
	GogentService_DeleteExecutionRun_FullMethodName   = "/gogent.GogentService/DeleteExecutionRun"
	GogentService_ListConfigurations_FullMethodName   = "/gogent.GogentService/ListConfigurations"
	GogentService_CreateConfiguration_FullMethodName  = "/gogent.GogentService/CreateConfiguration"
	GogentService_UpdateConfiguration_FullMethodName  = "/gogent.GogentService/UpdateConfiguration"
	GogentService_DeleteConfiguration_FullMethodName  = "/gogent.GogentService/DeleteConfiguration"
	GogentService_ListFunctions_FullMethodName        = "/gogent.GogentService/ListFunctions"
	GogentService_GetFunction_FullMethodName          = "/gogent.GogentService/GetFunction"
	GogentService_CreateFunction_FullMethodName       = "/gogent.GogentService/CreateFunction"
	GogentService_UpdateFunction_FullMethodName       = "/gogent.GogentService/UpdateFunction"
	GogentService_DeleteFunction_FullMethodName       = "/gogent.GogentService/DeleteFunction"
	GogentService_TestFunction_FullMethodName         = "/gogent.GogentService/TestFunction"
	GogentService_GetDatabaseStats_FullMethodName     = "/gogent.GogentService/GetDatabaseStats"
	GogentService_ListDatabaseTables_FullMethodName   = "/gogent.GogentService/ListDatabaseTables"
	GogentService_GetTableData_FullMethodName         = "/gogent.GogentService/GetTableData"
	GogentService_Health_FullMethodName               = "/gogent.GogentService/Health"
)

// GogentServiceClient is the client API for GogentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main gogent service
type GogentServiceClient interface {
	// Authentication & User Management
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	CreateTemporaryUser(ctx context.Context, in *CreateTemporaryUserRequest, opts ...grpc.CallOption) (*CreateTemporaryUserResponse, error)
	SaveTemporaryAccount(ctx context.Context, in *SaveTemporaryAccountRequest, opts ...grpc.CallOption) (*SaveTemporaryAccountResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error)
	// Execution Management
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	GetExecutionStatus(ctx context.Context, in *GetExecutionStatusRequest, opts ...grpc.CallOption) (*GetExecutionStatusResponse, error)
	GetExecutionResult(ctx context.Context, in *GetExecutionResultRequest, opts ...grpc.CallOption) (*GetExecutionResultResponse, error)
	ListExecutionRuns(ctx context.Context, in *ListExecutionRunsRequest, opts ...grpc.CallOption) (*ListExecutionRunsResponse, error)
	DeleteExecutionRun(ctx context.Context, in *DeleteExecutionRunRequest, opts ...grpc.CallOption) (*DeleteExecutionRunResponse, error)
	// Configuration Management
	ListConfigurations(ctx context.Context, in *ListConfigurationsRequest, opts ...grpc.CallOption) (*ListConfigurationsResponse, error)
	CreateConfiguration(ctx context.Context, in *CreateConfigurationRequest, opts ...grpc.CallOption) (*CreateConfigurationResponse, error)
	UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest, opts ...grpc.CallOption) (*UpdateConfigurationResponse, error)
	DeleteConfiguration(ctx context.Context, in *DeleteConfigurationRequest, opts ...grpc.CallOption) (*DeleteConfigurationResponse, error)
	// Function Management
	ListFunctions(ctx context.Context, in *ListFunctionsRequest, opts ...grpc.CallOption) (*ListFunctionsResponse, error)
	GetFunction(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error)
	CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error)
	UpdateFunction(ctx context.Context, in *UpdateFunctionRequest, opts ...grpc.CallOption) (*UpdateFunctionResponse, error)
	DeleteFunction(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*DeleteFunctionResponse, error)
	TestFunction(ctx context.Context, in *TestFunctionRequest, opts ...grpc.CallOption) (*TestFunctionResponse, error)
	// Database Management
	GetDatabaseStats(ctx context.Context, in *GetDatabaseStatsRequest, opts ...grpc.CallOption) (*GetDatabaseStatsResponse, error)
	ListDatabaseTables(ctx context.Context, in *ListDatabaseTablesRequest, opts ...grpc.CallOption) (*ListDatabaseTablesResponse, error)
	GetTableData(ctx context.Context, in *GetTableDataRequest, opts ...grpc.CallOption) (*GetTableDataResponse, error)
	// Health & System
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type gogentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGogentServiceClient(cc grpc.ClientConnInterface) GogentServiceClient {
	return &gogentServiceClient{cc}
}

func (c *gogentServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, GogentService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, GogentService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) CreateTemporaryUser(ctx context.Context, in *CreateTemporaryUserRequest, opts ...grpc.CallOption) (*CreateTemporaryUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTemporaryUserResponse)
	err := c.cc.Invoke(ctx, GogentService_CreateTemporaryUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) SaveTemporaryAccount(ctx context.Context, in *SaveTemporaryAccountRequest, opts ...grpc.CallOption) (*SaveTemporaryAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTemporaryAccountResponse)
	err := c.cc.Invoke(ctx, GogentService_SaveTemporaryAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, GogentService_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentUserResponse)
	err := c.cc.Invoke(ctx, GogentService_GetCurrentUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, GogentService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) GetExecutionStatus(ctx context.Context, in *GetExecutionStatusRequest, opts ...grpc.CallOption) (*GetExecutionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExecutionStatusResponse)
	err := c.cc.Invoke(ctx, GogentService_GetExecutionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) GetExecutionResult(ctx context.Context, in *GetExecutionResultRequest, opts ...grpc.CallOption) (*GetExecutionResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExecutionResultResponse)
	err := c.cc.Invoke(ctx, GogentService_GetExecutionResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) ListExecutionRuns(ctx context.Context, in *ListExecutionRunsRequest, opts ...grpc.CallOption) (*ListExecutionRunsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExecutionRunsResponse)
	err := c.cc.Invoke(ctx, GogentService_ListExecutionRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) DeleteExecutionRun(ctx context.Context, in *DeleteExecutionRunRequest, opts ...grpc.CallOption) (*DeleteExecutionRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExecutionRunResponse)
	err := c.cc.Invoke(ctx, GogentService_DeleteExecutionRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) ListConfigurations(ctx context.Context, in *ListConfigurationsRequest, opts ...grpc.CallOption) (*ListConfigurationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConfigurationsResponse)
	err := c.cc.Invoke(ctx, GogentService_ListConfigurations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) CreateConfiguration(ctx context.Context, in *CreateConfigurationRequest, opts ...grpc.CallOption) (*CreateConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConfigurationResponse)
	err := c.cc.Invoke(ctx, GogentService_CreateConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest, opts ...grpc.CallOption) (*UpdateConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConfigurationResponse)
	err := c.cc.Invoke(ctx, GogentService_UpdateConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) DeleteConfiguration(ctx context.Context, in *DeleteConfigurationRequest, opts ...grpc.CallOption) (*DeleteConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConfigurationResponse)
	err := c.cc.Invoke(ctx, GogentService_DeleteConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) ListFunctions(ctx context.Context, in *ListFunctionsRequest, opts ...grpc.CallOption) (*ListFunctionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFunctionsResponse)
	err := c.cc.Invoke(ctx, GogentService_ListFunctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) GetFunction(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionResponse)
	err := c.cc.Invoke(ctx, GogentService_GetFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFunctionResponse)
	err := c.cc.Invoke(ctx, GogentService_CreateFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) UpdateFunction(ctx context.Context, in *UpdateFunctionRequest, opts ...grpc.CallOption) (*UpdateFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFunctionResponse)
	err := c.cc.Invoke(ctx, GogentService_UpdateFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) DeleteFunction(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*DeleteFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFunctionResponse)
	err := c.cc.Invoke(ctx, GogentService_DeleteFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) TestFunction(ctx context.Context, in *TestFunctionRequest, opts ...grpc.CallOption) (*TestFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestFunctionResponse)
	err := c.cc.Invoke(ctx, GogentService_TestFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) GetDatabaseStats(ctx context.Context, in *GetDatabaseStatsRequest, opts ...grpc.CallOption) (*GetDatabaseStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatabaseStatsResponse)
	err := c.cc.Invoke(ctx, GogentService_GetDatabaseStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) ListDatabaseTables(ctx context.Context, in *ListDatabaseTablesRequest, opts ...grpc.CallOption) (*ListDatabaseTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatabaseTablesResponse)
	err := c.cc.Invoke(ctx, GogentService_ListDatabaseTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) GetTableData(ctx context.Context, in *GetTableDataRequest, opts ...grpc.CallOption) (*GetTableDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableDataResponse)
	err := c.cc.Invoke(ctx, GogentService_GetTableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gogentServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, GogentService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GogentServiceServer is the server API for GogentService service.
// All implementations must embed UnimplementedGogentServiceServer
// for forward compatibility.
//
// Main gogent service
type GogentServiceServer interface {
	// Authentication & User Management
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	CreateTemporaryUser(context.Context, *CreateTemporaryUserRequest) (*CreateTemporaryUserResponse, error)
	SaveTemporaryAccount(context.Context, *SaveTemporaryAccountRequest) (*SaveTemporaryAccountResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error)
	// Execution Management
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	GetExecutionStatus(context.Context, *GetExecutionStatusRequest) (*GetExecutionStatusResponse, error)
	GetExecutionResult(context.Context, *GetExecutionResultRequest) (*GetExecutionResultResponse, error)
	ListExecutionRuns(context.Context, *ListExecutionRunsRequest) (*ListExecutionRunsResponse, error)
	DeleteExecutionRun(context.Context, *DeleteExecutionRunRequest) (*DeleteExecutionRunResponse, error)
	// Configuration Management
	ListConfigurations(context.Context, *ListConfigurationsRequest) (*ListConfigurationsResponse, error)
	CreateConfiguration(context.Context, *CreateConfigurationRequest) (*CreateConfigurationResponse, error)
	UpdateConfiguration(context.Context, *UpdateConfigurationRequest) (*UpdateConfigurationResponse, error)
	DeleteConfiguration(context.Context, *DeleteConfigurationRequest) (*DeleteConfigurationResponse, error)
	// Function Management
	ListFunctions(context.Context, *ListFunctionsRequest) (*ListFunctionsResponse, error)
	GetFunction(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error)
	CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error)
	UpdateFunction(context.Context, *UpdateFunctionRequest) (*UpdateFunctionResponse, error)
	DeleteFunction(context.Context, *DeleteFunctionRequest) (*DeleteFunctionResponse, error)
	TestFunction(context.Context, *TestFunctionRequest) (*TestFunctionResponse, error)
	// Database Management
	GetDatabaseStats(context.Context, *GetDatabaseStatsRequest) (*GetDatabaseStatsResponse, error)
	ListDatabaseTables(context.Context, *ListDatabaseTablesRequest) (*ListDatabaseTablesResponse, error)
	GetTableData(context.Context, *GetTableDataRequest) (*GetTableDataResponse, error)
	// Health & System
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedGogentServiceServer()
}

// UnimplementedGogentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGogentServiceServer struct{}

func (UnimplementedGogentServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGogentServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGogentServiceServer) CreateTemporaryUser(context.Context, *CreateTemporaryUserRequest) (*CreateTemporaryUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemporaryUser not implemented")
}
func (UnimplementedGogentServiceServer) SaveTemporaryAccount(context.Context, *SaveTemporaryAccountRequest) (*SaveTemporaryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTemporaryAccount not implemented")
}
func (UnimplementedGogentServiceServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedGogentServiceServer) GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedGogentServiceServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedGogentServiceServer) GetExecutionStatus(context.Context, *GetExecutionStatusRequest) (*GetExecutionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionStatus not implemented")
}
func (UnimplementedGogentServiceServer) GetExecutionResult(context.Context, *GetExecutionResultRequest) (*GetExecutionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionResult not implemented")
}
func (UnimplementedGogentServiceServer) ListExecutionRuns(context.Context, *ListExecutionRunsRequest) (*ListExecutionRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionRuns not implemented")
}
func (UnimplementedGogentServiceServer) DeleteExecutionRun(context.Context, *DeleteExecutionRunRequest) (*DeleteExecutionRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExecutionRun not implemented")
}
func (UnimplementedGogentServiceServer) ListConfigurations(context.Context, *ListConfigurationsRequest) (*ListConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigurations not implemented")
}
func (UnimplementedGogentServiceServer) CreateConfiguration(context.Context, *CreateConfigurationRequest) (*CreateConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfiguration not implemented")
}
func (UnimplementedGogentServiceServer) UpdateConfiguration(context.Context, *UpdateConfigurationRequest) (*UpdateConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedGogentServiceServer) DeleteConfiguration(context.Context, *DeleteConfigurationRequest) (*DeleteConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfiguration not implemented")
}
func (UnimplementedGogentServiceServer) ListFunctions(context.Context, *ListFunctionsRequest) (*ListFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunctions not implemented")
}
func (UnimplementedGogentServiceServer) GetFunction(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunction not implemented")
}
func (UnimplementedGogentServiceServer) CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedGogentServiceServer) UpdateFunction(context.Context, *UpdateFunctionRequest) (*UpdateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunction not implemented")
}
func (UnimplementedGogentServiceServer) DeleteFunction(context.Context, *DeleteFunctionRequest) (*DeleteFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunction not implemented")
}
func (UnimplementedGogentServiceServer) TestFunction(context.Context, *TestFunctionRequest) (*TestFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestFunction not implemented")
}
func (UnimplementedGogentServiceServer) GetDatabaseStats(context.Context, *GetDatabaseStatsRequest) (*GetDatabaseStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseStats not implemented")
}
func (UnimplementedGogentServiceServer) ListDatabaseTables(context.Context, *ListDatabaseTablesRequest) (*ListDatabaseTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabaseTables not implemented")
}
func (UnimplementedGogentServiceServer) GetTableData(context.Context, *GetTableDataRequest) (*GetTableDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableData not implemented")
}
func (UnimplementedGogentServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedGogentServiceServer) mustEmbedUnimplementedGogentServiceServer() {}
func (UnimplementedGogentServiceServer) testEmbeddedByValue()                       {}

// UnsafeGogentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GogentServiceServer will
// result in compilation errors.
type UnsafeGogentServiceServer interface {
	mustEmbedUnimplementedGogentServiceServer()
}

func RegisterGogentServiceServer(s grpc.ServiceRegistrar, srv GogentServiceServer) {
	// If the following call pancis, it indicates UnimplementedGogentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GogentService_ServiceDesc, srv)
}

func _GogentService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_CreateTemporaryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemporaryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).CreateTemporaryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_CreateTemporaryUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).CreateTemporaryUser(ctx, req.(*CreateTemporaryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_SaveTemporaryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTemporaryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).SaveTemporaryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_SaveTemporaryAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).SaveTemporaryAccount(ctx, req.(*SaveTemporaryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).GetCurrentUser(ctx, req.(*GetCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_GetExecutionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).GetExecutionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_GetExecutionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).GetExecutionStatus(ctx, req.(*GetExecutionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_GetExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).GetExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_GetExecutionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).GetExecutionResult(ctx, req.(*GetExecutionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_ListExecutionRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExecutionRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).ListExecutionRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_ListExecutionRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).ListExecutionRuns(ctx, req.(*ListExecutionRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_DeleteExecutionRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExecutionRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).DeleteExecutionRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_DeleteExecutionRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).DeleteExecutionRun(ctx, req.(*DeleteExecutionRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_ListConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).ListConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_ListConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).ListConfigurations(ctx, req.(*ListConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_CreateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).CreateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_CreateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).CreateConfiguration(ctx, req.(*CreateConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_UpdateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).UpdateConfiguration(ctx, req.(*UpdateConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_DeleteConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).DeleteConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_DeleteConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).DeleteConfiguration(ctx, req.(*DeleteConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_ListFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).ListFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_ListFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).ListFunctions(ctx, req.(*ListFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_GetFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).GetFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_GetFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).GetFunction(ctx, req.(*GetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_CreateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).CreateFunction(ctx, req.(*CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_UpdateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).UpdateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_UpdateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).UpdateFunction(ctx, req.(*UpdateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_DeleteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).DeleteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_DeleteFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).DeleteFunction(ctx, req.(*DeleteFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_TestFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).TestFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_TestFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).TestFunction(ctx, req.(*TestFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_GetDatabaseStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).GetDatabaseStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_GetDatabaseStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).GetDatabaseStats(ctx, req.(*GetDatabaseStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_ListDatabaseTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabaseTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).ListDatabaseTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_ListDatabaseTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).ListDatabaseTables(ctx, req.(*ListDatabaseTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_GetTableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).GetTableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_GetTableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).GetTableData(ctx, req.(*GetTableDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GogentService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GogentServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GogentService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GogentServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GogentService_ServiceDesc is the grpc.ServiceDesc for GogentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GogentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gogent.GogentService",
	HandlerType: (*GogentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _GogentService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _GogentService_Register_Handler,
		},
		{
			MethodName: "CreateTemporaryUser",
			Handler:    _GogentService_CreateTemporaryUser_Handler,
		},
		{
			MethodName: "SaveTemporaryAccount",
			Handler:    _GogentService_SaveTemporaryAccount_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _GogentService_VerifyEmail_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _GogentService_GetCurrentUser_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _GogentService_Execute_Handler,
		},
		{
			MethodName: "GetExecutionStatus",
			Handler:    _GogentService_GetExecutionStatus_Handler,
		},
		{
			MethodName: "GetExecutionResult",
			Handler:    _GogentService_GetExecutionResult_Handler,
		},
		{
			MethodName: "ListExecutionRuns",
			Handler:    _GogentService_ListExecutionRuns_Handler,
		},
		{
			MethodName: "DeleteExecutionRun",
			Handler:    _GogentService_DeleteExecutionRun_Handler,
		},
		{
			MethodName: "ListConfigurations",
			Handler:    _GogentService_ListConfigurations_Handler,
		},
		{
			MethodName: "CreateConfiguration",
			Handler:    _GogentService_CreateConfiguration_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _GogentService_UpdateConfiguration_Handler,
		},
		{
			MethodName: "DeleteConfiguration",
			Handler:    _GogentService_DeleteConfiguration_Handler,
		},
		{
			MethodName: "ListFunctions",
			Handler:    _GogentService_ListFunctions_Handler,
		},
		{
			MethodName: "GetFunction",
			Handler:    _GogentService_GetFunction_Handler,
		},
		{
			MethodName: "CreateFunction",
			Handler:    _GogentService_CreateFunction_Handler,
		},
		{
			MethodName: "UpdateFunction",
			Handler:    _GogentService_UpdateFunction_Handler,
		},
		{
			MethodName: "DeleteFunction",
			Handler:    _GogentService_DeleteFunction_Handler,
		},
		{
			MethodName: "TestFunction",
			Handler:    _GogentService_TestFunction_Handler,
		},
		{
			MethodName: "GetDatabaseStats",
			Handler:    _GogentService_GetDatabaseStats_Handler,
		},
		{
			MethodName: "ListDatabaseTables",
			Handler:    _GogentService_ListDatabaseTables_Handler,
		},
		{
			MethodName: "GetTableData",
			Handler:    _GogentService_GetTableData_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _GogentService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gogent.proto",
}
